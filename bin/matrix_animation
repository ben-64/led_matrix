#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import argparse
import time
import traceback

from led_matrix.matrix import LEDMatrix
from led_matrix.screen import Console,NcursesConsole
from led_matrix.animation import *

def load_animations():
    animations = get_all_subclasses(animation.Application)
    for anim in animations:
        globals()[anim.__name__] = anim

def get_all_subclasses(cls):
    all_subclasses = []

    for subclass in cls.__subclasses__():
        all_subclasses.append(subclass)
        all_subclasses.extend(get_all_subclasses(subclass))

    return all_subclasses

def find_app(app):
    apps = get_all_subclasses(animation.Application)
    try:
        return eval(app)
    except:
        print("Unable to find application %s : Possible values: %s" % (app,",".join([x.__name__ for x in apps])))
        sys.exit(1)

def parse_args():
    parser = argparse.ArgumentParser(description="Play animation with a LED Matrix")
    parser.add_argument("--height","-H",metavar="HEIGHT",default=8,type=int,help="Height of the screen")
    parser.add_argument("--width","-W",metavar="WIDTH",default=32,type=int,help="Width of the screen")
    parser.add_argument("--screen","-S",metavar="SCREEN",default=LEDMatrix,type=lambda x:eval(x),help="Screen to use")
    parser.add_argument("--application","-A",metavar="SCREEN",default=Clock(),type=find_app,help="Application to run")
    return parser.parse_args()


def main():
    """ Entry Point Program """
    load_animations()
    args = parse_args()

    screen = args.screen(height=args.height,width=args.width)

    try:
        app = args.application
        app.screen = screen
        app.run()
    except KeyboardInterrupt:
        pass
    except:
        print("something wrong happened")
        traceback.print_exc(file=sys.stdout)
    finally:
        screen.stop()

    return 0


if __name__ == "__main__":
   sys.exit(main())
