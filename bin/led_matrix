#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import argparse
import time
import traceback

from led_matrix.matrix import LEDMatrix
from led_matrix.screen import Console,NcursesConsole
from led_matrix.fonts.font4x5 import Font4x5
from led_matrix.fonts.adafruit import AdaFruit

def parse_args():
    parser = argparse.ArgumentParser(description="Play with a LED Matrix")
    parser.add_argument("--height","-H",metavar="HEIGHT",default=8,type=int,help="Height of the screen")
    parser.add_argument("--width","-W",metavar="WIDTH",default=32,type=int,help="Width of the screen")
    parser.add_argument("-x",metavar="X",default=0,type=int,help="Abcsisse")
    parser.add_argument("-y",metavar="Y",default=0,type=int,help="Ordinate")
    parser.add_argument("-x1",metavar="X",default=255,type=int,help="Abcsisse")
    parser.add_argument("-y1",metavar="Y",default=255,type=int,help="Ordinate")
    parser.add_argument("--figure-width",metavar="WIDTH",default=10,type=int,help="Width of the rectangle")
    parser.add_argument("--figure-height",metavar="HEIGHT",default=5,type=int,help="Height of the rectangle")
    parser.add_argument("--color","-c",metavar="COLOR",default=0xFF0000,type=lambda x:int(x,0),help="COLOR")
    parser.add_argument("--text","-t",metavar="TEXT",help="Text to display")
    parser.add_argument("--center-text","-C",metavar="TEXT",help="Text to center")
    parser.add_argument("--font",metavar="FONT",default=Font4x5,type=lambda x:eval(x),help="Font to use")
    parser.add_argument("--scroll",metavar="DELTA",nargs=2,type=int,help="Scroll")
    parser.add_argument("--pixel",action="store_true",help="Set a pixel on the screen")
    parser.add_argument("--rectangle",action="store_true",help="Draw a rectangle on the screen")
    parser.add_argument("--line",action="store_true",help="Print a line on the screen")
    parser.add_argument("--hline",action="store_true",help="Print a line on the screen")
    parser.add_argument("--vline",action="store_true",help="Print a line on the screen")
    parser.add_argument("--fill-rectangle",action="store_true",help="Just fill a rectangle on the screen")
    parser.add_argument("--fill",action="store_true",help="Fill the screen")
    parser.add_argument("--screen","-S",metavar="SCREEN",default=LEDMatrix,type=lambda x:eval(x),help="Screen to use")
    parser.add_argument("--modulo",action="store_true",help="Scrolling is modulo")
    parser.add_argument("--img",metavar="IMG",type=lambda img:[int(x,0) for x in img.split(",")],help="Display Image")
    return parser.parse_args()

def main():
    """ Entry Point Program """
    args = parse_args()

    screen = args.screen(height=args.height,width=args.width)
    font = args.font()

    if args.text:
        screen.text(args.text,args.x,args.y,args.color,font=font)
    elif args.center_text:
        screen.center_text(args.center_text,args.color,font=font)
    elif args.pixel:
        screen.pixel(args.x,args.y,args.color)
    elif args.rectangle:
        screen.rect(args.x,args.y,args.figure_width,args.figure_height,args.color)
    elif args.line:
        screen.line(args.x,args.y,args.x1,args.y1,args.color)
    elif args.hline:
        screen.hline(args.x,args.y,args.figure_width,args.color)
    elif args.vline:
        screen.vline(args.x,args.y,args.figure_height,args.color)
    elif args.fill:
        screen.fill(args.color)
    elif args.fill_rectangle:
        screen.fill_rect(args.x,args.y,args.figure_height,args.figure_width,args.color)
    elif args.img:
        screen.image(args.img)

    screen.render()

    try:
        while True:
            if args.scroll:
                screen.scroll(args.scroll[0],args.scroll[1],modulo=args.modulo)
                screen.render()
            time.sleep(1)
    except KeyboardInterrupt:
        pass
    except:
        traceback.print_exc(file=sys.stdout)
    finally:
        screen.stop()

    return 0


if __name__ == "__main__":
   sys.exit(main())
